.container {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    background: linear-gradient(#c1cdf754, rgba(255, 255, 255, 0.62));
    display: flex;
    justify-content: center;
    align-items: center;
    transition: 1s all;
    animation: rotato 30s linear infinite;
    animation-play-state: paused;
    transition: 3s all;
}

body {
    overflow: hidden;
}

.loadBoxBottom {
    position: absolute;
    width: 100%;
    height: 10vw;
    bottom: -20vw;
    background-color: rgba(0, 0, 0, 0.3);
    animation-duration: 2s;
    animation-name: loadBoxBottom, rotato;
    animation-iteration-count: 2, infinite;
    border-radius: 35% 35% 0% 0%;
    transition: 1s all;
    animation-play-state: running, paused;
}

#verticalResizeCursor {
    display: block;
    margin: auto;
    width: 10vw;
    height: 100%;
}


.loadBoxBottom:hover {
    animation-play-state: running, running;
}

@keyframes loadBoxBottom {

    to {
        background-color: rgba(121, 120, 120, 0.01);
        margin-bottom: 20vw;
    }
}



.boxes1 {
    width: 10%;
    height: 10%;
    background: rgba(0, 0, 0, 0.31);
    border-style: solid;
    border-color: rgba(255, 0, 0, 0.29);
    position: relative;
    right: -50%;
    top: 60%;
    /* kinda just a dummy line. since this is relative, it's going from the top of "container". dictates whether this box comes from middle or lower of screen p much*/
    animation: rotato 3s linear infinite;
    animation-play-state: running;
    transition: 3s all;
    /*  animation code kindly sourced from stackoverflow  */
}

@keyframes rotato {
    to {
        transform: rotate(360deg);
    }
}

.subboxes1 {
    width: 100%;
    height: 20%;
    background: rgba(0, 0, 0, 0.31);
    position: relative;

}

.boxes1:hover {
    animation-play-state: paused;
}


.boxes2 {
    width: 10%;
      height: 10%;
      background: rgba(0, 0, 0, 0.31);
      border-style: solid;
      border-color: rgba(255, 0, 0, 0.29);
      position: relative;
      right: -50%;
      top: 5%;
      /* kinda just a dummy line. since this is relative, it's going from the top of "container". dictates whether this box comes from middle or lower of screen p much*/
      animation: rotato 1s linear infinite;
      animation-delay: .9s;
      animation-play-state: running;
      transition: 3s all;
  }

.boxes2:hover {
    animation-play-state: paused;
}

@keyframes rotato3D {
    to {
        transform: rotate3d(2, -1, -1, -1turn);
    }
}


#boxes23 {
    right: 40px;
    width: 40%;
    height: 20%;
    top: auto;
}

#boxes25 {
    right: -20px;
    width: 20%;
    height: 20%;
}


.boxes3 {
    width: 30%;
    height: 10%;
    left: 0%;
    right: 10%;
    top: 0%;
    bottom: 0%;
    position: relative;
    margin: 1vw;
    padding: .5vw;
    background-color: rgba(210, 105, 30, 0.363);
    border: 1px ridge darkcyan;
    border-radius: 30%;
    animation: rotatoOpposite 3s linear infinite;
    animation-play-state: paused;
    transition: 3s all;
}

.boxes3:hover {
    animation-play-state: running;
}

@keyframes rotatoOpposite {
    to {
        transform: rotate(360deg);
    }
}

.boxes4{
    width: 100%;
    height: 100%;
    position: absolute;
    background-color: pink;
    right: -95%;
    top: -95%;
    transition: 2s all;
    animation: wiggle 1.5s linear infinite;
}

@keyframes wiggle {
    0% { transform: rotate(0deg); }
    80% { transform: rotate(0deg); }
    85% { transform: rotate(2deg); }
    95% { transform: rotate(-2deg); }
   100% { transform: rotate(0deg); }
}

.boxes4:hover{
    animation-play-state: paused;
    top: -100%;
}


/* making a breakpoint for phones */
@media (max-width:450px) and (min-width:0px) {

    .loadBoxBottom{
        width: 0%;
        height: 0%;
        background-color: transparent;
    }

    .container {
        animation-play-state: running;
        width: 60%;
        height: 60%;
        animation-duration: 80s;
    }

    .container:hover{
        animation-play-state: paused; 
    }
}


/* making a breakpoint for tablets */
@media (max-width:768px) and (min-width:450px) {
    .boxes1{
        animation-play-state: running;
    }
}

/* can i just do the rest of these as accounting for laptop and desktop? */

@media (max-width: 1600px) {}

@media (max-width: 1500px) {}

@media (max-width: 1400px) {
}

@media (max-height: 1100px) {}

@media (max-width: 1400px) and (max-height: 1000px) {
    .boxes1 {
        transition: 3s all;
        top: 10%;
        right: 20%;
    }


}

@media (max-width: 1300px) {
    .boxes1 {
        border-radius: 10% 10% 10% 10%;
    }
}

@media (max-height: 950px) {}

@media (max-width: 1200px) and (max-height: 900px) {
    .boxes2 {
        transition: 3s all;
        bottom: 50%;
        right: 40%;
        /* top: 40%; */
        /* right: 60%; */
    }
}


@media (max-height: 850px) {}

@media (max-width: 1000px) and (max-height: 800px) {}

/* media query for 950 width and 750 height */

@media (max-width: 900px) and (max-height: 700px) {
    .container {
        animation-play-state: running;
        width: 80%;
        height: 80%;
    }

    .boxes4{
        animation-play-state: paused;
    }
}

@media (max-width: 800px) and (max-height: 600px) {
    .container {
        /* animation-duration: 45s; */
        width: 50%;
        height: 50%;
        background-color: rgba(245, 245, 245, 0.384);
    }
}

@media (max-width: 600px) and (max-height: 400px) {
    .container {
        /* animation-duration: 30s; */
        width: 20%;
        height: 20%;
    }

    .boxes4{
        width: 70%;
        height: 70%;
        right: -65%;
        top: -65%;
    }
}

@media (max-height: 400px) {

    html, body {
        height: 100%;
    }

    .container {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .boxes3 {
        animation: move 10s infinite alternate, bounce .5s infinite alternate;
/* this line isn't letting me edit 2 animations */
    }

    .container>.boxes3:nth-child(2) {
        animation-delay: .02s;
    }


    @keyframes move{
        from {
            transform:translateX(-50rem);
        }
        to{ 
            transform:translateX(20rem);
        }
    }

    @keyframes bounce {
        from {
            transform: translate3d(0);
        }

        to {
            transform: translate3d(0, -.1rem, 0);
        }
    }
}


